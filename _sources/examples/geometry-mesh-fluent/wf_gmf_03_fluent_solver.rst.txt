
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/geometry-mesh-fluent/wf_gmf_03_fluent_solver.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_geometry-mesh-fluent_wf_gmf_03_fluent_solver.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_geometry-mesh-fluent_wf_gmf_03_fluent_solver.py:


.. _ref_geometry-mesh-fluent_03-fluent-solver:

Fluids simulation
#################

This example demonstrates how to solve the flow around a NACA airfoil using Fluent.

Starting from the mesh created in the previous example, the script solves the
flow around a NACA airfoil using Fluent. The parameters are set to solve the flow
with a Mach number of 0.3, a temperature of 255.56 K, an angle of attack of 3.06 degrees,
and a pressure of 80600 Pa. Overall, these are the conditions for a compressible flow.

.. GENERATED FROM PYTHON SOURCE LINES 36-43

.. code-block:: Python


    import os

    import ansys.fluent.core as pyfluent
    import numpy as np









.. GENERATED FROM PYTHON SOURCE LINES 52-57

Parameters for the script
-------------------------
The following parameters are used to control the script execution. You can
modify these parameters to suit your needs.


.. GENERATED FROM PYTHON SOURCE LINES 57-70

.. code-block:: Python


    # NACA 4-digits airfoil geometry
    NACA_AIRFOIL = "6412"

    # Data directory
    DATA_DIR = os.path.join(os.path.dirname(__file__), "outputs")

    # Simulation parameters
    SIM_MACH = 0.3  # 0.8395 # Mach number
    SIM_TEMPERATURE = 255.56  # In Kelvin
    SIM_AOA = 3.06  # in degrees
    SIM_PRESSURE = 80600  # in Pa








.. GENERATED FROM PYTHON SOURCE LINES 71-90

Solve the flow around the airfoil
---------------------------------
The function `solve_airfoil_flow` solves the flow around a NACA airfoil using Fluent.
The function takes the following parameters:

- `naca_airfoil`: NACA 4-digits airfoil number.
- `sim_mach`: Mach number.
- `sim_temperature`: Temperature in Kelvin.
- `sim_aoa`: Angle of attack in degrees.
- `sim_pressure`: Pressure in Pascal.
- `data_dir`: Directory to save the mesh file.
- `container_dict`: Configuration for the Fluent container. The default is None.
- `iter_count`: Number of iterations to solve. The default is ``25``.
- `ui_mode`: User interface mode. The default is None.

The function switches to the Fluent solver and loads the mesh. It defines the model,
material, boundary conditions, operating conditions, initializes the flow field,
saves the case file, solves for the requested iterations, and exits Fluent.


.. GENERATED FROM PYTHON SOURCE LINES 90-238

.. code-block:: Python



    def solve_airfoil_flow(
        naca_airfoil: str,
        sim_mach: float,
        sim_temperature: float,
        sim_aoa: float,
        sim_pressure: float,
        data_dir: str,
        container_dict: dict | None = None,
        iter_count: int = 25,
        ui_mode: str | None = None,
    ):
        """
        Solve the flow around a NACA airfoil using Fluent.

        Parameters
        ----------
        naca_airfoil : str
            NACA 4-digits airfoil number.
        sim_mach : float
            Mach number.
        sim_temperature : float
            Temperature in Kelvin.
        sim_aoa : float
            Angle of attack in degrees.
        sim_pressure : float
            Pressure in Pascal.
        data_dir : str
            Directory to save the mesh file.
        container_dict : dict, optional
            Configuration for the Fluent container. The default is None.
        iter_count : int, optional
            Number of iterations to solve. The default is ``25``.
        ui_mode : str, optional
            User interface mode. The default is None.
        """

        # Switch to Fluent solver
        if container_dict is not None:
            solver = pyfluent.launch_fluent(
                container_dict=container_dict,
                start_container=True,
                precision="double",
                processor_count=4,
                mode="solver",
                ui_mode="no_gui_or_graphics",
                cwd=data_dir,
                cleanup_on_exit=False,
                start_timeout=300,
            )
        else:
            solver = pyfluent.launch_fluent(
                precision="double",
                processor_count=4,
                mode="solver",
                ui_mode=ui_mode,
                cwd=data_dir,
            )

        # Load mesh
        solver.file.read_mesh(file_name=f"{data_dir}/NACA_Airfoil_{naca_airfoil}.msh.h5")

        # Verify the mesh
        solver.mesh.check()

        # Define the model
        # model : k-omega
        # k-omega model : sst
        viscous = solver.setup.models.viscous
        viscous.model = "k-omega"
        viscous.k_omega_model = "sst"

        # Define material
        #
        # density : ideal-gas
        # viscosity : sutherland
        # viscosity method : three-coefficient-method
        # reference viscosity : 1.716e-05 [kg/(m s)]
        # reference temperature : 273.11 [K]
        # effective temperature : 110.56 [K]
        air = solver.setup.materials.fluid["air"]
        air.density.option = "ideal-gas"
        air.viscosity.option = "sutherland"
        air.viscosity.sutherland.option = "three-coefficient-method"
        air.viscosity.sutherland.reference_viscosity = 1.716e-05
        air.viscosity.sutherland.reference_temperature = 273.11
        air.viscosity.sutherland.effective_temperature = 110.56

        # Define Boundary conditions
        #
        # gauge pressure : 0 [Pa]
        # turbulent intensity : 5 [%]solve
        # turbulent viscosity ratio : 10
        #
        solver.setup.boundary_conditions.set_zone_type(
            zone_list=["inlet-fluid"], new_type="pressure-far-field"
        )

        inlet_fluid = solver.setup.boundary_conditions.pressure_far_field["inlet-fluid"]
        aoa = np.deg2rad(sim_aoa)
        if solver.get_fluent_version() < pyfluent.FluentVersion.v242:
            inlet_fluid.gauge_pressure = 0
            inlet_fluid.m = sim_mach
            inlet_fluid.t = sim_temperature
            inlet_fluid.flow_direction[0] = np.cos(aoa)
            inlet_fluid.flow_direction[1] = np.sin(aoa)
            inlet_fluid.turbulent_intensity = 0.05
            inlet_fluid.turbulent_viscosity_ratio_real = 10

        else:
            inlet_fluid.momentum.gauge_pressure = 0
            inlet_fluid.momentum.mach_number = sim_mach
            inlet_fluid.thermal.temperature = sim_temperature
            inlet_fluid.momentum.flow_direction[0] = np.cos(aoa)
            inlet_fluid.momentum.flow_direction[1] = np.sin(aoa)
            inlet_fluid.turbulence.turbulent_intensity = 0.05
            inlet_fluid.turbulence.turbulent_viscosity_ratio = 10

        # Define operating conditions
        #
        solver.setup.general.operating_conditions.operating_pressure = sim_pressure

        # Initialize flow field
        solver.solution.initialization.hybrid_initialize()

        # Save case file
        solver.file.write(
            file_name=f"{data_dir}/NACA_Airfoil_{naca_airfoil}_initialization.cas.h5",
            file_type="case",
        )

        # Solve for requested iterations
        solver.solution.run_calculation.iterate(iter_count=iter_count)
        solver.file.write(
            file_name=f"{data_dir}/NACA_Airfoil_{naca_airfoil}_resolved.cas.h5",
            file_type="case",
        )
        # Write data file as well
        solver.file.write(
            file_name=f"{data_dir}/NACA_Airfoil_{naca_airfoil}_resolved.dat.h5",
            file_type="data",
        )

        # Exit Fluent
        solver.exit()









.. GENERATED FROM PYTHON SOURCE LINES 239-247

Executing the mesh generation
-----------------------------
The previous function is called to generate the mesh for the NACA airfoil.
The mesh is saved in the `outputs` directory. Depending on the environment,
the script will run in a container or locally.

Depending on the environment, the script will run in a container or locally.


.. GENERATED FROM PYTHON SOURCE LINES 247-268

.. code-block:: Python


    if os.getenv("PYANSYS_WORKFLOWS_CI") == "true":
        container_dict = {
            "fluent_image": os.getenv("FLUENT_DOCKER_IMAGE"),
            "command": os.getenv("FLUENT_DOCKER_EXEC_COMMAND").split(),
            "mount_source": DATA_DIR,
        }
        # https://fluent.docs.pyansys.com/version/stable/api/general/launcher/fluent_container.html
        # Solve the flow around the airfoil
        solve_airfoil_flow(
            NACA_AIRFOIL,
            SIM_MACH,
            SIM_TEMPERATURE,
            SIM_AOA,
            SIM_PRESSURE,
            "/home/container/workdir",
            container_dict=container_dict,
        )
    else:
        # Solve the flow around the airfoil
        solve_airfoil_flow(NACA_AIRFOIL, SIM_MACH, SIM_TEMPERATURE, SIM_AOA, SIM_PRESSURE, DATA_DIR)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    pyfluent.launcher WARNING: Configuring Fluent container to mount to /home/runner/work/pyansys-workflows/pyansys-workflows/geometry-mesh-fluent/outputs, with this path available as /home/container/workdir for the Fluent session running inside the container.
    Fast-loading "/ansys_inc/v242/fluent/fluent24.2.0/addons/afd/lib/hdfio.bin"
    Done.

    Reading from 01a068ff3118:"/home/container/workdir/NACA_Airfoil_6412.msh.h5" in NODE0 mode ...
      Reading mesh ...
         4056102 cells,     2 cell zones ...
            1876929 mixed cells,  zone id: 115
            2179173 mixed cells,  zone id: 120
        17711833 faces,     6 face zones ...
                832 polygonal wall faces,  zone id: 22
             111656 polygonal wall faces,  zone id: 19
                254 polygonal velocity-inlet faces,  zone id: 21
                254 polygonal pressure-outlet faces,  zone id: 20
            9463259 mixed interior faces,  zone id: 122
            8135578 mixed interior faces,  zone id: 117
        10083445 nodes,     4 node zones ...

    Building...
         mesh
            distributing mesh
                    parts....,
                    faces....,
                    nodes....,
                    cells....,
            bandwidth reduction using Reverse Cuthill-McKee: 1011519/44178 = 22.8964
      Reading boundary layer flags ...
      Done.

         materials,
         interface,
         domains,
         zones,
            airfoil-faces-shadow
            Skipping thread 14 of domain 1 (not referenced by grid).
            Skipping thread 15 of domain 1 (not referenced by grid).
            Skipping thread 16 of domain 1 (not referenced by grid).
            Skipping thread 17 of domain 1 (not referenced by grid).
            Skipping thread 18 of domain 1 (not referenced by grid).
            surrounding-faces
            airfoil-faces
            inlet-fluid
            outlet-fluid
            interior--fluid
            interior--airfoil
            airfoil
            fluid
         parallel,
    Done.
    Mesh is now scaled to meters.

     Domain Extents:
       x-coordinate: min (m) = -4.500000e+00, max (m) = 5.500000e+00
       y-coordinate: min (m) = -1.000000e+00, max (m) = 1.000000e+00
       z-coordinate: min (m) = -2.000000e+00, max (m) = 3.000000e+00
     Volume statistics:
       minimum volume (m3): 9.010892e-13
       maximum volume (m3): 1.338319e-01
         total volume (m3): 1.000000e+02
     Face area statistics:
       minimum face area (m2): 2.752279e-09
       maximum face area (m2): 6.653067e-01
     Checking mesh......................................
    Done.

    Note: Settings to improve the robustness of pathline and
          particle tracking have been automatically enabled.

 
    Note: Enabling energy equation as required by material density method.

    Initialize using the hybrid initialization method.

    Checking case topology... 
    -This case combines farfield, inlets and outlets 
    -Pressure information is available at the boundaries

            iter            scalar-0                scalar-1

            1               1.000000e+00    1.000000e+00
            2               6.414472e-05    2.707620e-07
            3               1.955959e-05    1.008985e-07
            4               1.213986e-05    7.097106e-08
            5               5.058160e-06    2.554840e-08
            6               3.634542e-06    2.341433e-08
            7               1.937288e-06    7.392772e-09
            8               1.177918e-06    8.597644e-09
            9               6.640012e-07    2.766816e-09
            10              4.812570e-07    2.892290e-09

    Hybrid initialization is done.

    Writing to 01a068ff3118:"/home/container/workdir/NACA_Airfoil_6412_initialization.cas.h5" in NODE0 mode and compression level 1 ...
    Grouping cells for Laplace smoothing ...
      Done.     4056102 cells,     2 zones ...
        17823489 faces,     7 zones ...
        10192098 nodes,     1 zone  ...
      Done.

      Writing boundary layer flags ...
      Done.
    Done.

      iter  continuity  x-velocity  y-velocity  z-velocity      energy           k       omega     time/iter
         1  1.0000e+00  2.8273e-04  2.8100e-04  1.4412e-04  3.8572e-05  9.7766e-01  4.9399e-01  0:15:45   24
         2  6.0836e-01  2.4213e-04  4.6727e-04  9.5866e-05  3.6432e-05  9.5832e-01  4.9020e-01  0:14:53   23
         3  6.1272e-01  2.4053e-04  3.1384e-04  7.3959e-05  3.6911e-05  9.0234e-01  4.8381e-01  0:14:06   22
         4  6.0753e-01  2.1638e-04  2.1896e-04  6.5866e-05  3.4981e-05  7.2017e-01  4.7288e-01  0:13:21   21
         5  6.0986e-01  1.8566e-04  1.5452e-04  6.1918e-05  3.0267e-05  4.4863e-01  4.5379e-01  0:12:23   20
         6  5.9836e-01  1.5718e-04  1.1224e-04  5.8361e-05  2.5143e-05  2.3080e-01  4.2048e-01  0:11:28   19
         7  5.5146e-01  1.4815e-04  8.4877e-05  5.5034e-05  2.0760e-05  1.2376e-01  3.6487e-01  0:10:38   18
         8  4.8829e-01  1.4446e-04  6.6867e-05  5.0230e-05  1.8143e-05  6.4747e-02  2.8355e-01  0:09:57   17
         9  4.2107e-01  1.3849e-04  5.5797e-05  4.4386e-05  1.6285e-05  3.5026e-02  1.9121e-01  0:09:17   16
        10  3.5999e-01  1.2846e-04  4.7884e-05  3.8270e-05  1.4810e-05  2.3466e-02  1.1089e-01  0:08:39   15
        11  3.0938e-01  1.2114e-04  4.1590e-05  3.2611e-05  1.4267e-05  2.1903e-02  5.8009e-02  0:08:01   14

      iter  continuity  x-velocity  y-velocity  z-velocity      energy           k       omega     time/iter
        12  2.6769e-01  1.1523e-04  3.5653e-05  2.7561e-05  1.4591e-05  2.5492e-02  2.9395e-02  0:07:25   13
        13  2.3106e-01  1.1006e-04  3.0498e-05  2.2964e-05  1.5110e-05  2.8536e-02  1.5292e-02  0:06:45   12
        14  2.0338e-01  1.0276e-04  2.5740e-05  1.8952e-05  1.4874e-05  3.0009e-02  8.5546e-03  0:06:08   11
        15  1.8284e-01  9.4219e-05  2.2011e-05  1.5695e-05  1.3974e-05  2.9796e-02  5.3074e-03  0:05:32   10
        16  1.6805e-01  8.8461e-05  1.9041e-05  1.3201e-05  1.3106e-05  2.8406e-02  3.6625e-03  0:04:56    9
        17  1.5471e-01  8.5009e-05  1.6765e-05  1.1477e-05  1.2468e-05  2.6741e-02  2.7943e-03  0:04:22    8
        18  1.4472e-01  8.2848e-05  1.5040e-05  1.0366e-05  1.1906e-05  2.5005e-02  2.2487e-03  0:03:47    7
        19  1.3962e-01  8.0015e-05  1.3903e-05  9.7157e-06  1.0979e-05  2.3066e-02  1.8635e-03  0:03:14    6
        20  1.3378e-01  7.5464e-05  1.3281e-05  9.4355e-06  9.7850e-06  2.0726e-02  1.6049e-03  0:02:41    5
        21  1.2680e-01  6.9528e-05  1.2725e-05  9.2967e-06  8.5709e-06  1.7773e-02  1.4219e-03  0:02:08    4
        22  1.1848e-01  6.2807e-05  1.1984e-05  9.1926e-06  7.4705e-06  1.5092e-02  1.2797e-03  0:01:36    3

      iter  continuity  x-velocity  y-velocity  z-velocity      energy           k       omega     time/iter
        23  1.0856e-01  5.6250e-05  1.1085e-05  8.8048e-06  6.5544e-06  1.2978e-02  1.1599e-03  0:01:04    2
        24  9.8075e-02  5.0240e-05  9.9207e-06  8.0226e-06  5.8066e-06  1.1204e-02  1.0538e-03  0:00:32    1
        25  8.8472e-02  4.4587e-05  8.6142e-06  6.9134e-06  5.1819e-06  9.6990e-03  9.5849e-04  0:00:00    0

    Writing to 01a068ff3118:"/home/container/workdir/NACA_Airfoil_6412_resolved.cas.h5" in NODE0 mode and compression level 1 ...
    Grouping cells for Laplace smoothing ...
         4056102 cells,     2 zones ...
        17823489 faces,     7 zones ...
        10192098 nodes,     1 zone  ...
      Done.

      Writing boundary layer flags ...
      Done.
    Done.

    Writing to 01a068ff3118:"/home/container/workdir/NACA_Airfoil_6412_resolved.dat.h5" in NODE0 mode and compression level 1 ...
      Writing results.
    Done.





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (18 minutes 34.713 seconds)


.. _sphx_glr_download_examples_geometry-mesh-fluent_wf_gmf_03_fluent_solver.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: wf_gmf_03_fluent_solver.ipynb <wf_gmf_03_fluent_solver.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: wf_gmf_03_fluent_solver.py <wf_gmf_03_fluent_solver.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: wf_gmf_03_fluent_solver.zip <wf_gmf_03_fluent_solver.zip>`
