[{"objectID":"Workflow examples","href":"examples/geometry-mesh-fluent/index.html#geometry-meshing-and-fluids-workflow","title":"Workflow examples > Geometry, meshing and fluids workflow","text":"Geometry, meshing and fluids workflow\n\nBelow is an example of a workflow that demonstrates how to create a geometry, mesh it, and run a\nfluid simulation using PyAnsys. The geometry generated is a NACA airfoil, which is prepared for a fluid\nsimulation. The exported CAD file is then consumed by Ansys Fluent to run a compressible flow simulation\nover the airfoil.\n\nsphx_glr_examples_geometry-mesh-fluent_wf_gmf_01_geometry.py\n\nsphx_glr_examples_geometry-mesh-fluent_wf_gmf_02_fluent_meshing.py\n\nsphx_glr_examples_geometry-mesh-fluent_wf_gmf_03_fluent_solver.py\n\n"},{"objectID":"Workflow examples","href":"examples.html#workflow-examples","title":"Workflow examples","text":"Workflow examples\n\n"},{"objectID":"Workflow examples","href":"examples.html#fluent-and-mechanical-heat-transfer-workflow-for-exhaust-manifold","title":"Workflow examples > Fluent and mechanical heat transfer workflow for exhaust manifold","text":"Fluent and mechanical heat transfer workflow for exhaust manifold\n\nThis workflow demonstrates the typical solver setup involved in performing a CFD\nsimulation for the conjugate heat transfer (CHT) analysis of an exhaust manifold\nusing Ansys Fluent and followed by Thermo-Mechanical analysis using Ansys Mechanical.\n\nsphx_glr_examples_fluent-mechanical_wf_fm_01_fluent.py\n\nsphx_glr_examples_fluent-mechanical_wf_fm_02_mechanical.py"},{"objectID":"Workflow examples","href":"examples.html#geometry-and-meshing-workflow","title":"Workflow examples > Geometry and meshing workflow","text":"Geometry and meshing workflow\n\nBelow is an example of a geometry and meshing workflow using\nPyAnsys Geometry and PyPrimeMesh.\n\nsphx_glr_examples_geometry-mesh_wf_gm_01_geometry.py\n\nsphx_glr_examples_geometry-mesh_wf_gm_02_mesh.py"},{"objectID":"Workflow examples","href":"examples.html#geometry-meshing-and-fluids-workflow","title":"Workflow examples > Geometry, meshing and fluids workflow","text":"Geometry, meshing and fluids workflow\n\nBelow is an example of a workflow that demonstrates how to create a geometry, mesh it, and run a\nfluid simulation using PyAnsys. The geometry generated is a NACA airfoil, which is prepared for a fluid\nsimulation. The exported CAD file is then consumed by Ansys Fluent to run a compressible flow simulation\nover the airfoil.\n\nsphx_glr_examples_geometry-mesh-fluent_wf_gmf_01_geometry.py\n\nsphx_glr_examples_geometry-mesh-fluent_wf_gmf_02_fluent_meshing.py\n\nsphx_glr_examples_geometry-mesh-fluent_wf_gmf_03_fluent_solver.py"},{"objectID":"Workflow examples","href":"examples.html#mapdl-and-dpf-workflow","title":"Workflow examples > MAPDL and DPF workflow","text":"MAPDL and DPF workflow\n\nThis example demonstrates consecutive sub modeling using PyMAPDL and PyDPF. The DPF framework\ninterpolates global model displacements and transfers them as boundary conditions to the local\nmodel, enabling efficient global–local coupling with the MAPDL pool.\n\nsphx_glr_examples_mapdl-dpf_wf_mapdl-dpf.py"},{"objectID":"Workflow examples","href":"examples.html#speos-optislang-workflow","title":"Workflow examples > Speos, optiSLang workflow","text":"Speos, optiSLang workflow\n\nBelow is an example workflow that demonstrates how to perform an optical lightguide robustness\nstudy, set up the robustness workflow, and run an optical simulation using PyAnsys. The lightguide\nis prepared in Speos and exported as a .speos file. The exported file is processed by pySpeos to\nrun a parametric study, controlled by PyOptiSLang, in order to evaluate the to understand the\ninfluence of source power, source position on the lightguide performance, i.e. RMS contrast,\naverage luminance as well as the number of failed regulations\n\nsphx_glr_examples_speos-optislang_wf_so_01_light_guide_robustness_study.py"},{"objectID":"Home","href":"getting_started/index.html#getting-started","title":"Getting started","text":"Getting started\n\nThis repository holds examples of how to use PyAnsys to automate Ansys simulations."},{"objectID":"Home","href":"getting_started/index.html#introduction","title":"Getting started > Introduction","text":"Introduction\n\nAs PyAnsys grows in adoption, we want to provide users with examples of how to use the ecosystem libraries\nto automate Ansys simulations. This repository contains workflows that demonstrate how to use PyAnsys to\nautomate different parts of the simulation process, such as geometry creation, meshing, simulation setup and post-processing."},{"objectID":"Home","href":"getting_started/index.html#available-workflows","title":"Getting started > Available workflows","text":"Available workflows\n\nWithin this repository, users can find multiphysics examples that demonstrate how to use PyAnsys\nto automate Ansys simulations. The workflows are organized by folders, each containing Python scripts\nfor every part of the simulation process. The available workflows are:\n\nGeometry and meshing: this workflow demonstrates how to create a geometry and mesh\nit using PyAnsys. The geometry is a simple CAD structure. The involved Ansys products are:\n\nFor geometry: Ansys SpaceClaim / Ansys Discovery / Ansys Geometry Service\n\nFor meshing: Ansys PRIME Server\n\nGeometry, meshing and fluids simulation: this workflow demonstrates how to\ncreate a geometry, mesh it, and run a fluid simulation using PyAnsys. The geometry generated is a NACA\nairfoil, which is prepared for a fluid simulation. The exported CAD file is then consumed by Ansys Fluent\nto run a compressible flow simulation over the airfoil. The involved Ansys products are:\n\nFor geometry: Ansys SpaceClaim / Ansys Discovery / Ansys Geometry Service\n\nFor meshing: Ansys Fluent Meshing\n\nFor simulation: Ansys Fluent Solver\n\nGeometry, mechanical and post-processing: this workflow demonstrates how to\ncreate a printed circuit board (PCB) geometry, mesh, run steady state and transient thermal analysis,\nand post-process using DPF. The geometry generated is a simple PCB with multiple chips.\nThe exported CAD file (PMDB format) is then imported inside Ansys Mechanical\nto run a steady-state thermal analysis followed by transient analysis.\nAll temperature results in different chips are displayed using DPF. The involved Ansys products are:\n\nFor geometry: Ansys SpaceClaim / Ansys Discovery / Ansys Geometry Service\n\nFor simulation: Ansys Mechanical\n\nFor post-procesing: Ansys Data Processing Framework\n\nFluent and mechanical analysis: this workflow demonstrates how to perform a Conjugate Heat Transfer (CHT) analysis for an exhaust manifold to simulate heat transfer between solid and fluid domains, calculate heat transfer coefficients (HTCs) and temperature distribution, and export results for thermo-mechanical analysis. The thermo-mechanical assessment is then performed to evaluate the exhaust manifold’s performance under thermal cycling, aiding in design optimization for durability\nThe involved Ansys products are:\n\nFor fluids analysis: Ansys Fluent\n\nFor thermal analysis: Ansys Mechanical\n\nSpeos and optiSLang robustness analysis: this workflow performs a robustness\nstudy to evaluate how variations in LED source power and position influence lightguide performance using PySpeos and PyOptiSLang. The analysis quantifies performance\nthrough key metrics such as RMS contrast, average luminance, and the number of failed regulations.\nThe involved Ansys products are:\n\nFor optical analysis: Ansys Speos\n\nFor robustness analysis: Ansys optiSLang"},{"objectID":"Home","href":"getting_started/index.html#how-to-run-the-workflows","title":"Getting started > How to run the workflows","text":"How to run the workflows\n\nAll workflows are structured in the same way, with a Python script for each part of the simulation process.\nTo run the workflows, users need to have Ansys installed on their machine. The setup process is the following:\n\nDownload the repository to your local machine:\n\nNavigate to the desired workflow folder:\n\nCreate a virtual environment and install the required packages:\n\nDepending on the Ansys version you have installed, select the appropriate requirements file to install:\n\nFor Ansys 2024 R1:\n\nFor Ansys 2024 R2:\n\nRun the Python scripts in the expected order. For example, to run the geometry and meshing workflow:\n\nThe scripts will generate the geometry and mesh files in the outputs folder. This behavior is consistent\nacross all workflows."},{"objectID":"Home","href":"getting_started/index.html#ansys-versions-supported","title":"Getting started > Ansys versions supported","text":"Ansys versions supported\n\nThe workflows in this repository are tested with the following Ansys releases:\n\nAnsys 2024 R1\n\nAnsys 2024 R2\n\nEach workflow is ran on our CI/CD pipelines to ensure compatibility with the supported Ansys versions."},{"objectID":"Home","href":"getting_started/index.html#contributing","title":"Getting started > Contributing","text":"Contributing\n\nThis repository is open for contributions. If you have a workflow that you would like to share with the community,\nplease open a pull request with the new content. The workflow should be organized in a similar way to the existing\nones, with Python scripts for each part of the simulation process."},{"objectID":"Workflow examples","href":"examples/fluent-mechanical/wf_fm_02_mechanical.html#thermo-mechanical-assessment-of-representative-exhaust-manifold-model","title":"Workflow examples > Thermo-mechanical assessment of representative exhaust manifold model","text":"Thermo-mechanical assessment of representative exhaust manifold model"},{"objectID":"Workflow examples","href":"examples/fluent-mechanical/wf_fm_02_mechanical.html#background","title":"Workflow examples > Thermo-mechanical assessment of representative exhaust manifold model > Background","text":"Background\n\nThe turbine housing/exhaust manifold is a critical component as it is subjected to extreme\ntemperature cycling. This induces fatigue in the housing material and leads to early\nfailure. Simulation helps to design housing and other parts for extended service life."},{"objectID":"Workflow examples","href":"examples/fluent-mechanical/wf_fm_02_mechanical.html#thermo-mechanical-workflow","title":"Workflow examples > Thermo-mechanical assessment of representative exhaust manifold model > Thermo-mechanical workflow","text":"Thermo-mechanical workflow\n\nA comprehensive CFD analysis of the exhaust manifold component is executed as a\nsteady-state examination, focusing on the specified duty cycle. This process involves\ntwo recurring duty cycles, during which the temperature and other crucial operating\nparameters, such as mass flow and pressure, maintain a consistent pseudo-steady state.\n\nThree unique operating conditions are chosen from the duty cycle, and steady-state\ncalculations are performed corresponding to the exhaust gas temperature in each case.\nThe resulting Heat Transfer Coefficients (HTCs) and temperatures at the solid-fluid\ninterface are exported to a CSV file, which serves as the input for subsequent thermal\ncalculations in the Mechanical run.\n\nThe Mechanical run encompasses Structural Transient Thermal and Non-linear (NL) Static\nanalyses, employing temperature-dependent Bilinear Kinematic hardening material\nproperties for a thorough structural evaluation.\n\nIn the Transient Thermal run, imported HTCs and reference temperatures from the\nCFD runs are mapped onto the structural mesh of the exhaust manifold assembly. External\nconvection loads and other boundary conditions are applied to calculate the temperature\ndistribution across the exhaust manifold assembly.\n\nSubsequently, a non-linear static analysis is conducted to determine the plastic strain,\ntaking into account the temperature distribution calculated in the Transient Thermal\nsolve and other relevant structural boundary conditions.\n\nThis approach leads to a more impactful and precise understanding of the exhaust\nmanifold’s performance subjected to thermal cycling."},{"objectID":"Workflow examples","href":"examples/fluent-mechanical/wf_fm_02_mechanical.html#parameters-for-the-script","title":"Workflow examples > Thermo-mechanical assessment of representative exhaust manifold model > Parameters for the script","text":"Parameters for the script\n\nThe following parameters are used to control the script execution. You can\nmodify these parameters to suit your needs."},{"objectID":"Workflow examples","href":"examples/fluent-mechanical/wf_fm_02_mechanical.html#start-a-pymechanical-app","title":"Workflow examples > Thermo-mechanical assessment of representative exhaust manifold model > Start a PyMechanical app","text":"Start a PyMechanical app\n\nInput files needed for the simulation\n—————- ——————–\nDownload the input files needed for the simulation."},{"objectID":"Workflow examples","href":"examples/fluent-mechanical/wf_fm_02_mechanical.html#configure-graphics-for-image-export","title":"Workflow examples > Thermo-mechanical assessment of representative exhaust manifold model > Configure graphics for image export","text":"Configure graphics for image export"},{"objectID":"Workflow examples","href":"examples/fluent-mechanical/wf_fm_02_mechanical.html#import-geometry","title":"Workflow examples > Thermo-mechanical assessment of representative exhaust manifold model > Import geometry","text":"Import geometry\n\n"},{"objectID":"Workflow examples","href":"examples/fluent-mechanical/wf_fm_02_mechanical.html#import-material-assign-it-to-the-bodies-and-create-named-selections","title":"Workflow examples > Thermo-mechanical assessment of representative exhaust manifold model > Import material, assign it to the bodies and create Named Selections","text":"Import material, assign it to the bodies and create Named Selections"},{"objectID":"Workflow examples","href":"examples/fluent-mechanical/wf_fm_02_mechanical.html#set-up-the-mesh-and-generate","title":"Workflow examples > Thermo-mechanical assessment of representative exhaust manifold model > Set up the mesh and generate","text":"Set up the mesh and generate\n\n"},{"objectID":"Workflow examples","href":"examples/fluent-mechanical/wf_fm_02_mechanical.html#add-transient-thermal-analysis-and-set-up-the-analysis-settings","title":"Workflow examples > Thermo-mechanical assessment of representative exhaust manifold model > Add Transient Thermal Analysis and set up the analysis settings","text":"Add Transient Thermal Analysis and set up the analysis settings"},{"objectID":"Workflow examples","href":"examples/fluent-mechanical/wf_fm_02_mechanical.html#use-the-output-from-fluent-to-import-the-temperature-and-htc-data","title":"Workflow examples > Thermo-mechanical assessment of representative exhaust manifold model > Use the output from Fluent to import the temperature and HTC data","text":"Use the output from Fluent to import the temperature and HTC data\n\nAdd imported convection\n\n"},{"objectID":"Workflow examples","href":"examples/fluent-mechanical/wf_fm_02_mechanical.html#solve-and-post-process-the-results","title":"Workflow examples > Thermo-mechanical assessment of representative exhaust manifold model > Solve and post-process the results","text":"Solve and post-process the results\n\n"},{"objectID":"Workflow examples","href":"examples/fluent-mechanical/wf_fm_02_mechanical.html#setup-structural-analysis","title":"Workflow examples > Thermo-mechanical assessment of representative exhaust manifold model > Setup Structural Analysis","text":"Setup Structural Analysis"},{"objectID":"Workflow examples","href":"examples/fluent-mechanical/wf_fm_02_mechanical.html#solve-and-post-process-the-results","title":"Workflow examples > Thermo-mechanical assessment of representative exhaust manifold model > Solve and post-process the results","text":"Solve and post-process the results\n\n\n\n\n\n\n\nTotal running time of the script: (7 minutes 46.207 seconds)\n\n\n\nDownload Jupyter notebook: wf_fm_02_mechanical.ipynb\n\nDownload Python source code: wf_fm_02_mechanical.py\n\nDownload zipped: wf_fm_02_mechanical.zip"},{"objectID":"Workflow examples","href":"examples/fluent-mechanical/sg_execution_times.html#computation-times","title":"Workflow examples > Computation times","text":"Computation times\n\n07:46.207 total execution time for 2 files from examples/fluent-mechanical:\n\n\n\n\n\n\n\nExample\n\nTime\n\nMem (MB)\n\nsphx_glr_examples_fluent-mechanical_wf_fm_02_mechanical.py (wf_fm_02_mechanical.py)\n\n07:46.207\n\n0.0\n\nsphx_glr_examples_fluent-mechanical_wf_fm_01_fluent.py (wf_fm_01_fluent.py)\n\n00:00.000\n\n0.0"},{"objectID":"Workflow examples","href":"examples/speos-optislang/wf_so_01_light_guide_robustness_study.html#evaluating-robustness-of-exterior-lightguide","title":"Workflow examples > Evaluating robustness of exterior lightguide","text":"Evaluating robustness of exterior lightguide\n\nIn this example, we use Speos and optiSLang to analyze the robustness of a prismatic light\nguide and quantify the failure rate due to production tolerances in an automated way.\nWe will understand which tolerances lead to regulation fails for the automotive\nDay-Time-Running lights and which tolerances must be improved to increase the optical\nperformance. Additionally, we will evaluate the scattering of the homogeneity (RMS-contrast)\nand the lit appearance (average luminance) to see what the worst design looks like due to\ntolerances."},{"objectID":"Workflow examples","href":"examples/speos-optislang/wf_so_01_light_guide_robustness_study.html#problem-description","title":"Workflow examples > Evaluating robustness of exterior lightguide > Problem description","text":"Problem description\n\nThe optical simulation project includes a lightguide with an LED. During the vehicle assemble\nstep, the relative position of LED can have an impact on the optical performance of the\nlightguide, i.e. RMS-contrast and average luminance.\n\nThe workflow includes the following steps:\n- Definition of the variation analysis boundaries\n- optiSLang Project creation and workflow setup\n- optiSLang project execution\n- Connect to PySpeos server\n- PySpeos execution\n- Result evaluation\n\nThis workflow will generate output as a robustness summary table is printed out to the console."},{"objectID":"Workflow examples","href":"examples/speos-optislang/wf_so_01_light_guide_robustness_study.html#definition-of-the-variation-analysis-boundaries","title":"Workflow examples > Evaluating robustness of exterior lightguide > Definition of the variation analysis boundaries","text":"Definition of the variation analysis boundaries\n\nThe following parameters are used to control the script execution. You can\nmodify these parameters to suit your needs.\n- tolerance parameter and distributions\n- responses (quality measurements / performance indicator)\n- constraints (quality limits for each performance indicator)\n- the number of designs to be calculated for the robustness analysis"},{"objectID":"Workflow examples","href":"examples/speos-optislang/wf_so_01_light_guide_robustness_study.html#define-functions","title":"Workflow examples > Evaluating robustness of exterior lightguide > Define functions","text":"Define functions\n\nThe following functions are defined to perform various tasks in the\nrobustness analysis workflow, such as cleaning databases, displacing faces and bodies,\nopening results, changing source positions and powers, running Speos simulations,\nand creating the optiSLang workflow."},{"objectID":"Workflow examples","href":"examples/speos-optislang/wf_so_01_light_guide_robustness_study.html#main-script-execution","title":"Workflow examples > Evaluating robustness of exterior lightguide > Main script execution","text":"Main script execution\n\nFrom the environment variable, find the optiSLang executable for given version\nand initiate an optiSLang project."},{"objectID":"Workflow examples","href":"examples/speos-optislang/wf_so_01_light_guide_robustness_study.html#create-optislang-workflow","title":"Workflow examples > Evaluating robustness of exterior lightguide > Create optiSLang workflow","text":"Create optiSLang workflow\n\nCreate robustness workflow and define criteria definition"},{"objectID":"Workflow examples","href":"examples/speos-optislang/wf_so_01_light_guide_robustness_study.html#execute-robustness-analysis","title":"Workflow examples > Evaluating robustness of exterior lightguide > Execute Robustness analysis","text":"Execute Robustness analysis\n\nloop until get_status() and returns “Processing done” for the root system\n\nStatic Scene\n\n\n\nInteractive Scene\n\n"},{"objectID":"Workflow examples","href":"examples/speos-optislang/wf_so_01_light_guide_robustness_study.html#get-quality-values","title":"Workflow examples > Evaluating robustness of exterior lightguide > Get quality values","text":"Get quality values\n\nGet the robustness result and display in the console."},{"objectID":"Workflow examples","href":"examples/speos-optislang/wf_so_01_light_guide_robustness_study.html#close-optislang","title":"Workflow examples > Evaluating robustness of exterior lightguide > Close optiSLang","text":"Close optiSLang\n\nTotal running time of the script: (33 minutes 17.113 seconds)\n\n\n\nDownload Jupyter notebook: wf_so_01_light_guide_robustness_study.ipynb\n\nDownload Python source code: wf_so_01_light_guide_robustness_study.py\n\nDownload zipped: wf_so_01_light_guide_robustness_study.zip"},{"objectID":"Workflow examples","href":"examples/fluent-mechanical/wf_fm_01_fluent.html#conjugate-heat-transfer-workflow-for-exhaust-manifold","title":"Workflow examples > Conjugate Heat Transfer Workflow for Exhaust Manifold","text":"Conjugate Heat Transfer Workflow for Exhaust Manifold\n\nThis workflow demonstrates the typical solver setup involved in performing a CFD\nsimulation for the conjugate heat transfer (CHT) analysis of an exhaust manifold.\nA conjugate heat transfer analysis is a type of simulation that involves the\nsimultaneous solution of heat transfer in both solid and fluid domains. In this\ncase, the exhaust manifold is a solid domain, and the fluid domain is the gas\nflowing through the manifold. The heat transfer between the solid and fluid domains\nis modeled using the heat transfer coefficient (HTC) at the interface between the two\ndomains.\nThis workflow provides a step-by-step guide to set up a CHT analysis for an exhaust\nmanifold using Ansys Fluent PyFluent APIs. The workflow includes usage of APIs to\nsetup the physics, material properties, boundary conditions, solver settings, and\nexporting the results to a CSV file for further use in a Thermo-Mechanical Analysis."},{"objectID":"Workflow examples","href":"examples/fluent-mechanical/wf_fm_01_fluent.html#problem-description","title":"Workflow examples > Conjugate Heat Transfer Workflow for Exhaust Manifold > Problem Description","text":"Problem Description\n\nThe geometry is an exhaust manifold with a fluid domain (gas) and a solid domain(metal)\nmeshed with a conformal Polyhedral mesh.The hot gas flows through the manifold,\nand the heat is transferred to the solid domain. The objective is to calculate the\nheat transfer coefficient (HTC) at the interface between the fluid and solid domains,\nthe temperature distribution in the solid domain, and export the results to a CSV\nfile for further use in a Thermo-Mechanical Analysis.\n\nThe workflow includes the following steps:\n- Launch Fluent\n- Load the mesh file\n- Define the material properties\n- Define the boundary conditions\n- Define the solver settings\n- Initialize the solution\n- Run the solver\n- Export the results to CSV file\n- Close Fluent\n\nThis workflow will generate the following files as output:\n- exhaust_manifold_results_HIGH_TEMP.cas.h5\n- exhaust_manifold_results_MEDIUM_TEMP.cas.h5\n- exhaust_manifold_results_LOW_TEMP.cas.h5\n- exhaust_manifold_results_HIGH_TEMP.dat.h5\n- exhaust_manifold_results_MEDIUM_TEMP.dat.h5\n- exhaust_manifold_results_LOW_TEMP.dat.h5\n- htc_temp_mapping_HIGH_TEMP.csv\n- htc_temp_mapping_MEDIUM_TEMP.csv\n- htc_temp_mapping_LOW_TEMP.csv\n- Fluent transcript file (fluent-YYYYMMDD-HHMMSS-<processID>.trn)"},{"objectID":"Workflow examples","href":"examples/fluent-mechanical/wf_fm_01_fluent.html#launch-fluent","title":"Workflow examples > Conjugate Heat Transfer Workflow for Exhaust Manifold > Launch Fluent","text":"Launch Fluent\n\nLaunch Fluent as a service in solver mode with double precision running on\nfour processors and print Fluent version."},{"objectID":"Workflow examples","href":"examples/fluent-mechanical/wf_fm_01_fluent.html#read-the-mesh-file","title":"Workflow examples > Conjugate Heat Transfer Workflow for Exhaust Manifold > Read the mesh file","text":"Read the mesh file\n\nRead the mesh file into the Fluent solver and check the mesh information."},{"objectID":"Workflow examples","href":"examples/fluent-mechanical/wf_fm_01_fluent.html#define-the-physics","title":"Workflow examples > Conjugate Heat Transfer Workflow for Exhaust Manifold > Define the Physics","text":"Define the Physics\n\nDefine the physics of the problem by setting energy and turbulence models."},{"objectID":"Workflow examples","href":"examples/fluent-mechanical/wf_fm_01_fluent.html#define-the-material-properties","title":"Workflow examples > Conjugate Heat Transfer Workflow for Exhaust Manifold > Define the Material Properties","text":"Define the Material Properties\n\nDefine the material properties of the fluid, solid and assign the\nmaterial to the appropriate cell zones."},{"objectID":"Workflow examples","href":"examples/fluent-mechanical/wf_fm_01_fluent.html#define-the-named-expressions","title":"Workflow examples > Conjugate Heat Transfer Workflow for Exhaust Manifold > Define the Named Expressions","text":"Define the Named Expressions\n\nDefine the named expressions for the boundary conditions."},{"objectID":"Workflow examples","href":"examples/fluent-mechanical/wf_fm_01_fluent.html#define-the-boundary-conditions","title":"Workflow examples > Conjugate Heat Transfer Workflow for Exhaust Manifold > Define the Boundary Conditions","text":"Define the Boundary Conditions\n\nDefine the boundary conditions for the problem."},{"objectID":"Workflow examples","href":"examples/fluent-mechanical/wf_fm_01_fluent.html#define-the-solution-methods-and-solver-settings","title":"Workflow examples > Conjugate Heat Transfer Workflow for Exhaust Manifold > Define the Solution Methods and Solver Settings","text":"Define the Solution Methods and Solver Settings\n\nDefine the solution methods and solver settings for the problem."},{"objectID":"Workflow examples","href":"examples/fluent-mechanical/wf_fm_01_fluent.html#run-the-solver--export-the-results-to-csv","title":"Workflow examples > Conjugate Heat Transfer Workflow for Exhaust Manifold > Run the Solver & Export the Results to CSV","text":"Run the Solver & Export the Results to CSV\n\nRun the solver to solve the problem and export the results to a CSV file.\nDefine a tuple with temperature values\n\nStatic Scene\n\n\n\nInteractive Scene\n\n\n\nStatic Scene\n\n\n\nInteractive Scene\n\n\n\nStatic Scene\n\n\n\nInteractive Scene\n\n"},{"objectID":"Workflow examples","href":"examples/fluent-mechanical/wf_fm_01_fluent.html#exit-the-solver","title":"Workflow examples > Conjugate Heat Transfer Workflow for Exhaust Manifold > Exit the Solver","text":"Exit the Solver\n\nClose the Fluent solver.\n\nTotal running time of the script: (6 minutes 38.774 seconds)\n\n\n\nDownload Jupyter notebook: wf_fm_01_fluent.ipynb\n\nDownload Python source code: wf_fm_01_fluent.py\n\nDownload zipped: wf_fm_01_fluent.zip"},{"objectID":"Home","href":"index.html#pyansys-workflows","title":"PyAnsys workflows","text":"PyAnsys workflows\n\n\n\nThis is the landing page of PyAnsys workflows repository. This repository\ncontains a collection of examples that demonstrate how to use PyAnsys libraries\nchained together to solve complex engineering problems. The examples are\norganized by the type of workflow and the physics involved.\n\nGetting started \n\nLearn how the PyAnsys workflows repository is organized and how to\nget started running the examples.\n\ngetting_started/index\n\nWorkflow examples \n\nExplore examples that demonstrate how to use PyAnsys libraries\nchained together to solve complex engineering problems.\n\nexamples\n\nDo you have a workflow you would like to share?\n\nSubmit an issue with your suggestion\n(and ideally the involved libraries and scripts) and we will work with you to add it to the repository."},{"objectID":"Workflow examples","href":"examples/geometry-mesh-fluent/wf_gmf_03_fluent_solver.html#fluids-simulation","title":"Workflow examples > Fluids simulation","text":"Fluids simulation\n\nThis example demonstrates how to solve the flow around a NACA airfoil using Fluent.\n\nStarting from the mesh created in the previous example, the script solves the\nflow around a NACA airfoil using Fluent. The parameters are set to solve the flow\nwith a Mach number of 0.3, a temperature of 255.56 K, an angle of attack of 3.06 degrees,\nand a pressure of 80600 Pa. Overall, these are the conditions for a compressible flow."},{"objectID":"Workflow examples","href":"examples/geometry-mesh-fluent/wf_gmf_03_fluent_solver.html#parameters-for-the-script","title":"Workflow examples > Fluids simulation > Parameters for the script","text":"Parameters for the script\n\nThe following parameters are used to control the script execution. You can\nmodify these parameters to suit your needs."},{"objectID":"Workflow examples","href":"examples/geometry-mesh-fluent/wf_gmf_03_fluent_solver.html#solve-the-flow-around-the-airfoil","title":"Workflow examples > Fluids simulation > Solve the flow around the airfoil","text":"Solve the flow around the airfoil\n\nThe function solve_airfoil_flow solves the flow around a NACA airfoil using Fluent.\nThe function takes the following parameters:\n\nnaca_airfoil: NACA 4-digits airfoil number.\n\nsim_mach: Mach number.\n\nsim_temperature: Temperature in Kelvin.\n\nsim_aoa: Angle of attack in degrees.\n\nsim_pressure: Pressure in Pascal.\n\ndata_dir: Directory to save the mesh file.\n\ncontainer_dict: Configuration for the Fluent container. The default is None.\n\niter_count: Number of iterations to solve. The default is 25.\n\nui_mode: User interface mode. The default is None.\n\nThe function switches to the Fluent solver and loads the mesh. It defines the model,\nmaterial, boundary conditions, operating conditions, initializes the flow field,\nsaves the case file, solves for the requested iterations, and exits Fluent."},{"objectID":"Workflow examples","href":"examples/geometry-mesh-fluent/wf_gmf_03_fluent_solver.html#executing-the-mesh-generation","title":"Workflow examples > Fluids simulation > Executing the mesh generation","text":"Executing the mesh generation\n\nThe previous function is called to generate the mesh for the NACA airfoil.\nThe mesh is saved in the outputs directory. Depending on the environment,\nthe script will run in a container or locally.\n\nDepending on the environment, the script will run in a container or locally.\n\nTotal running time of the script: (18 minutes 34.713 seconds)\n\n\n\nDownload Jupyter notebook: wf_gmf_03_fluent_solver.ipynb\n\nDownload Python source code: wf_gmf_03_fluent_solver.py\n\nDownload zipped: wf_gmf_03_fluent_solver.zip"},{"objectID":"Computation times","href":"sg_execution_times.html#computation-times","title":"Computation times","text":"Computation times\n\n00:00.000 total execution time for 8 files from all galleries:\n\n\n\n\n\n\n\nExample\n\nTime\n\nMem (MB)\n\nsphx_glr_examples_fluent-mechanical_wf_fm_01_fluent.py (../../fluent-mechanical/wf_fm_01_fluent.py)\n\n00:00.000\n\n0.0\n\nsphx_glr_examples_fluent-mechanical_wf_fm_02_mechanical.py (../../fluent-mechanical/wf_fm_02_mechanical.py)\n\n00:00.000\n\n0.0\n\nsphx_glr_examples_geometry-mesh-fluent_wf_gmf_01_geometry.py (../../geometry-mesh-fluent/wf_gmf_01_geometry.py)\n\n00:00.000\n\n0.0\n\nsphx_glr_examples_geometry-mesh-fluent_wf_gmf_02_fluent_meshing.py (../../geometry-mesh-fluent/wf_gmf_02_fluent_meshing.py)\n\n00:00.000\n\n0.0\n\nsphx_glr_examples_geometry-mesh-fluent_wf_gmf_03_fluent_solver.py (../../geometry-mesh-fluent/wf_gmf_03_fluent_solver.py)\n\n00:00.000\n\n0.0\n\nsphx_glr_examples_geometry-mesh_wf_gm_01_geometry.py (../../geometry-mesh/wf_gm_01_geometry.py)\n\n00:00.000\n\n0.0\n\nsphx_glr_examples_geometry-mesh_wf_gm_02_mesh.py (../../geometry-mesh/wf_gm_02_mesh.py)\n\n00:00.000\n\n0.0\n\nsphx_glr_examples_speos-optislang_wf_so_01_light_guide_robustness_study.py (../../speos-optislang/wf_so_01_light_guide_robustness_study.py)\n\n00:00.000\n\n0.0"},{"objectID":"Workflow examples","href":"examples/fluent-mechanical/index.html#fluent-and-mechanical-heat-transfer-workflow-for-exhaust-manifold","title":"Workflow examples > Fluent and mechanical heat transfer workflow for exhaust manifold","text":"Fluent and mechanical heat transfer workflow for exhaust manifold\n\nThis workflow demonstrates the typical solver setup involved in performing a CFD\nsimulation for the conjugate heat transfer (CHT) analysis of an exhaust manifold\nusing Ansys Fluent and followed by Thermo-Mechanical analysis using Ansys Mechanical.\n\nsphx_glr_examples_fluent-mechanical_wf_fm_01_fluent.py\n\nsphx_glr_examples_fluent-mechanical_wf_fm_02_mechanical.py\n\n"},{"objectID":"Workflow examples","href":"examples/geometry-mesh/sg_execution_times.html#computation-times","title":"Workflow examples > Computation times","text":"Computation times\n\n00:38.834 total execution time for 2 files from examples/geometry-mesh:\n\n\n\n\n\n\n\nExample\n\nTime\n\nMem (MB)\n\nsphx_glr_examples_geometry-mesh_wf_gm_02_mesh.py (wf_gm_02_mesh.py)\n\n00:38.834\n\n0.0\n\nsphx_glr_examples_geometry-mesh_wf_gm_01_geometry.py (wf_gm_01_geometry.py)\n\n00:00.000\n\n0.0"},{"objectID":"Workflow examples","href":"examples/geometry-mesh-fluent/wf_gmf_01_geometry.html#geometry-generation","title":"Workflow examples > Geometry generation","text":"Geometry generation\n\nGenerate a NACA airfoil and the surrounding fluid domain using PyAnsys Geometry.\n\nThis example demonstrates how to create a sketch, perform modeling operations,\nand export the file in different formats (in this specific case, FMD). The example\nalso shows how to generate a NACA 4-digits airfoil and the surrounding fluid domain\nusing PyAnsys Geometry. The airfoil is extruded to create a 3D model, and the fluid\ndomain is created as a box around the airfoil."},{"objectID":"Workflow examples","href":"examples/geometry-mesh-fluent/wf_gmf_01_geometry.html#preparing-the-environment","title":"Workflow examples > Geometry generation > Preparing the environment","text":"Preparing the environment\n\nThis section is only necessary for workflow runs and docs generation. It checks\nthe environment variables to determine which image to use for the geometry service.\nIf you are running this script outside of a workflow, you can ignore this section."},{"objectID":"Workflow examples","href":"examples/geometry-mesh-fluent/wf_gmf_01_geometry.html#parameters-for-the-script","title":"Workflow examples > Geometry generation > Parameters for the script","text":"Parameters for the script\n\nThe following parameters are used to control the script execution. You can\nmodify these parameters to suit your needs."},{"objectID":"Workflow examples","href":"examples/geometry-mesh-fluent/wf_gmf_01_geometry.html#defining-the-naca-airfoil","title":"Workflow examples > Geometry generation > Defining the NACA airfoil","text":"Defining the NACA airfoil\n\nThe NACA airfoil is defined by a 4-digit number. The first digit represents the\nmaximum camber in percentage of the chord, the second digit represents the\nposition of the maximum camber in tenths of the chord, and the last two digits\nrepresent the maximum thickness in percentage of the chord.\n\nThe NACA airfoil is generated using the following formulae:\n\n\\begin{align*}\nx_u & = x - y_t \\sin(\\theta) \\\\\ny_u & = y_c + y_t \\cos(\\theta) \\\\\nx_l & = x + y_t \\sin(\\theta) \\\\\ny_l & = y_c - y_t \\cos(\\theta)    \\\\\n\\end{align*}\n\n\n\nwhere:\n\n is the x-coordinate of the point,\n\n is the camber line,\n\n is the thickness,\n\n is the angle of the camber line.\n\nThe camber line is defined as:\n\n\\begin{align*}\ny_c & = \\begin{cases}\n\\frac{m}{p^2} \\left(2 p x - x^2\\right) & \\text{if } x \\leq p \\\\\n\\frac{m}{(1 - p)^2} \\left((1 - 2 p) + 2 p x - x^2\\right) & \\text{if } x > p\n\\end{cases}\n\\end{align*}\n\n\n\nwhere:\n\n is the maximum camber,\n\n is the position of the maximum camber.\n\nThe thickness is defined as:\n\n\\begin{align*}\ny_t & = 5 t \\left(0.2969 \\sqrt{x} - 0.1260 x - 0.3516 x^2 + 0.2843 x^3 - 0.1015 x^4\\right)\n\\end{align*}\n\n\n\nwhere:\n\n is the maximum thickness.\n\nThe NACA 4-digits airfoil is generated using the following function. The function\ngenerates the points of the airfoil using the formulae above and returns\na list of points that define the airfoil."},{"objectID":"Workflow examples","href":"examples/geometry-mesh-fluent/wf_gmf_01_geometry.html#start-a-modeler-session","title":"Workflow examples > Geometry generation > Start a modeler session","text":"Start a modeler session\n\nStart a modeler session to interact with the Ansys Geometry Service. The\nmodeler object is used to create designs, sketches, and perform modeling\noperations."},{"objectID":"Workflow examples","href":"examples/geometry-mesh-fluent/wf_gmf_01_geometry.html#define-the-airfoil-points","title":"Workflow examples > Geometry generation > Define the airfoil points","text":"Define the airfoil points\n\nThe airfoil points are generated using the function defined above. The points\nare used to create a sketch of the airfoil.\n\nStatic Scene\n\n\n\nInteractive Scene\n\n"},{"objectID":"Workflow examples","href":"examples/geometry-mesh-fluent/wf_gmf_01_geometry.html#extrude-the-airfoil","title":"Workflow examples > Geometry generation > Extrude the airfoil","text":"Extrude the airfoil\n\nThe airfoil is extruded to create a 3D model by a given length. This will\ncreate a 3D model of the airfoil.\n\nStatic Scene\n\n\n\nInteractive Scene\n\n"},{"objectID":"Workflow examples","href":"examples/geometry-mesh-fluent/wf_gmf_01_geometry.html#create-the-fluid-domain","title":"Workflow examples > Geometry generation > Create the fluid domain","text":"Create the fluid domain\n\nIn this section, the surrounding fluid domain is created as a box around the\nairfoil.\n\nThe airfoil has the following dimensions:\n- Chord length: 1 (X-axis)\n- Thickness: depends on NACA value (Y-axis)\n\nThe fluid domain will be a large box with the following dimensions:\n- Length  (X-axis)\n- Width   (Z-axis)\n- Height  (Y-axis)\n\nThe airfoil will be placed at the center of the fluid domain\n\nCreate the sketch\n\nStatic Scene\n\n\n\nInteractive Scene\n\n"},{"objectID":"Workflow examples","href":"examples/geometry-mesh-fluent/wf_gmf_01_geometry.html#export-the-design","title":"Workflow examples > Geometry generation > Export the design","text":"Export the design\n\nThe design is exported to a file in PMDB format. The PMDB file can be used\nin Ansys Fluent to generate the mesh, since it contains the geometry and the\nnamed selections."},{"objectID":"Workflow examples","href":"examples/geometry-mesh-fluent/wf_gmf_01_geometry.html#close-session","title":"Workflow examples > Geometry generation > Close session","text":"Close session\n\nWhen you finish interacting with your modeling service, you should close the active\nserver session. This frees resources wherever the service is running.\n\nTotal running time of the script: (1 minutes 30.717 seconds)\n\n\n\nDownload Jupyter notebook: wf_gmf_01_geometry.ipynb\n\nDownload Python source code: wf_gmf_01_geometry.py\n\nDownload zipped: wf_gmf_01_geometry.zip"},{"objectID":"Workflow examples","href":"examples/geometry-mesh-fluent/sg_execution_times.html#computation-times","title":"Workflow examples > Computation times","text":"Computation times\n\n18:34.713 total execution time for 3 files from examples/geometry-mesh-fluent:\n\n\n\n\n\n\n\nExample\n\nTime\n\nMem (MB)\n\nsphx_glr_examples_geometry-mesh-fluent_wf_gmf_03_fluent_solver.py (wf_gmf_03_fluent_solver.py)\n\n18:34.713\n\n0.0\n\nsphx_glr_examples_geometry-mesh-fluent_wf_gmf_01_geometry.py (wf_gmf_01_geometry.py)\n\n00:00.000\n\n0.0\n\nsphx_glr_examples_geometry-mesh-fluent_wf_gmf_02_fluent_meshing.py (wf_gmf_02_fluent_meshing.py)\n\n00:00.000\n\n0.0"},{"objectID":"Workflow examples","href":"examples/mapdl-dpf/wf_mapdl-dpf.html#consecutive-submodeling-with-mapdl-pool","title":"Workflow examples > Consecutive submodeling with MAPDL pool","text":"Consecutive submodeling with MAPDL pool\n\nProblem description:\n\nIn this example, we demonstrate how to use MAPDL pool to\nperform a consecutive submodeling simulation with MAPDL and DPF.\n\nAnalysis type:\n\nStatic Analysis\n\nMaterial properties:\n\nYoung’s modulus, \n\nPoisson’s ratio, \n\nBoundary conditions (global model):\n\nFixed support applied at the bottom side\n\nFrictionless support applied at the right side\n\nLoading:\n\nTotal displacement of -1 mm in the Y-direction at the top surface,\nramped linearly over 10 timesteps\n\nModeling notes:\n\nAt each timestep, the global model is solved with the specified boundary\nconditions; the resulting nodal displacements are interpolated to the\nboundary nodes of the local model, using the DPF interpolation operator.\nThose displacements are enforced as constraints to the local model,\nwhich is then solved, completing that timestep."},{"objectID":"Workflow examples","href":"examples/mapdl-dpf/wf_mapdl-dpf.html#create-directories-to-save-the-results","title":"Workflow examples > Consecutive submodeling with MAPDL pool > Create directories to save the results","text":"Create directories to save the results"},{"objectID":"Workflow examples","href":"examples/mapdl-dpf/wf_mapdl-dpf.html#connect-to-dpf-server","title":"Workflow examples > Consecutive submodeling with MAPDL pool > Connect to DPF server","text":"Connect to DPF server\n\nWe connect to a local or remote DPF server.\nIf you are working with a remote server, you might need to upload the RST\nfile before working with it.\nThen you can create the DPF Model.\n\nStatic Scene\n\n\n\nInteractive Scene\n\n"},{"objectID":"Workflow examples","href":"examples/mapdl-dpf/wf_mapdl-dpf.html#set-up-dpf-operators","title":"Workflow examples > Consecutive submodeling with MAPDL pool > Set up DPF operators","text":"Set up DPF operators\n\nWe define two DPF operators: the first reads the displacement results from the global model,\nand the second interpolates those displacements onto the boundary coordinates of the local\nmodel. The DataSources class to link results with the DPF operator inputs."},{"objectID":"Workflow examples","href":"examples/mapdl-dpf/wf_mapdl-dpf.html#set-up-simulation-loop","title":"Workflow examples > Consecutive submodeling with MAPDL pool > Set up simulation loop","text":"Set up simulation loop\n\nWe solve the two models sequentially for each loading step.\nFirst the global model is run producing a .rst results file.\nThen we extract the global displacements and use them to define\ncut-boundary conditions for the local model\n(an input string command will be used for faster excecution time)."},{"objectID":"Workflow examples","href":"examples/mapdl-dpf/wf_mapdl-dpf.html#solve-system","title":"Workflow examples > Consecutive submodeling with MAPDL pool > Solve system","text":"Solve system"},{"objectID":"Workflow examples","href":"examples/mapdl-dpf/wf_mapdl-dpf.html#visualize-results","title":"Workflow examples > Consecutive submodeling with MAPDL pool > Visualize results","text":"Visualize results\n\nStatic Scene\n\n\n\nInteractive Scene\n\n\n\nStatic Scene\n\n\n\nInteractive Scene\n\n"},{"objectID":"Workflow examples","href":"examples/mapdl-dpf/wf_mapdl-dpf.html#exit-mapdl-instances","title":"Workflow examples > Consecutive submodeling with MAPDL pool > Exit MAPDL instances","text":"Exit MAPDL instances\n\nTotal running time of the script: (0 minutes 19.513 seconds)\n\n\n\nDownload Jupyter notebook: wf_mapdl-dpf.ipynb\n\nDownload Python source code: wf_mapdl-dpf.py\n\nDownload zipped: wf_mapdl-dpf.zip"},{"objectID":"Workflow examples","href":"examples/geometry-mesh/index.html#geometry-and-meshing-workflow","title":"Workflow examples > Geometry and meshing workflow","text":"Geometry and meshing workflow\n\nBelow is an example of a geometry and meshing workflow using\nPyAnsys Geometry and PyPrimeMesh.\n\nsphx_glr_examples_geometry-mesh_wf_gm_01_geometry.py\n\nsphx_glr_examples_geometry-mesh_wf_gm_02_mesh.py\n\n"},{"objectID":"Workflow examples","href":"examples/geometry-mesh/wf_gm_01_geometry.html#geometry-generation","title":"Workflow examples > Geometry generation","text":"Geometry generation\n\nThis example shows how to generate a CAD file using PyAnsys Geometry via\nthe Ansys Geometry Service. The example demonstrates how to create a sketch,\nperform modeling operations, and export the file in different formats (in this\nspecific case, FMD)."},{"objectID":"Workflow examples","href":"examples/geometry-mesh/wf_gm_01_geometry.html#preparing-the-environment","title":"Workflow examples > Geometry generation > Preparing the environment","text":"Preparing the environment\n\nThis section is only necessary for workflow runs and docs generation. It checks\nthe environment variables to determine which image to use for the geometry service.\nIf you are running this script outside of a workflow, you can ignore this section."},{"objectID":"Workflow examples","href":"examples/geometry-mesh/wf_gm_01_geometry.html#parameters-for-the-script","title":"Workflow examples > Geometry generation > Parameters for the script","text":"Parameters for the script\n\nThe following parameters are used to control the script execution. You can\nmodify these parameters to suit your needs."},{"objectID":"Workflow examples","href":"examples/geometry-mesh/wf_gm_01_geometry.html#start-a-modeler-session","title":"Workflow examples > Geometry generation > Start a modeler session","text":"Start a modeler session\n\nStart a modeler session to interact with the Ansys Geometry Service. The\nmodeler object is used to create designs, sketches, and perform modeling\noperations."},{"objectID":"Workflow examples","href":"examples/geometry-mesh/wf_gm_01_geometry.html#create-a-sketch","title":"Workflow examples > Geometry generation > Create a sketch","text":"Create a sketch\n\nCreate a sketch to define the geometry. The sketch is created in the XY plane\nand contains a rectangle and four circles."},{"objectID":"Workflow examples","href":"examples/geometry-mesh/wf_gm_01_geometry.html#modeling-operations","title":"Workflow examples > Geometry generation > Modeling operations","text":"Modeling operations\n\nNow that the sketch is ready to be extruded, perform some modeling operations,\nincluding creating the design, creating the body directly on the design, and\nplotting the body.\n\nStatic Scene\n\n\n\nInteractive Scene\n\n"},{"objectID":"Workflow examples","href":"examples/geometry-mesh/wf_gm_01_geometry.html#export-the-design","title":"Workflow examples > Geometry generation > Export the design","text":"Export the design\n\nOnce modeling operations are finalized, you can export files\nin different formats. For the formats supported by DMS, see the\nDesignFileFormat class in the Design module documentation.\n\nIn this example, we will export files in SCDOCX and FMD formats."},{"objectID":"Workflow examples","href":"examples/geometry-mesh/wf_gm_01_geometry.html#close-session","title":"Workflow examples > Geometry generation > Close session","text":"Close session\n\nWhen you finish interacting with your modeling service, you should close the active\nserver session. This frees resources wherever the service is running.\n\nTotal running time of the script: (3 minutes 0.382 seconds)\n\n\n\nDownload Jupyter notebook: wf_gm_01_geometry.ipynb\n\nDownload Python source code: wf_gm_01_geometry.py\n\nDownload zipped: wf_gm_01_geometry.zip"},{"objectID":"Workflow examples","href":"examples/geometry-mesh-fluent/wf_gmf_02_fluent_meshing.html#mesh-generation","title":"Workflow examples > Mesh generation","text":"Mesh generation\n\nThis example demonstrates how to generate a mesh for a NACA airfoil using Fluent Meshing.\n\nStarting from the geometry created in the previous example, the script generates a mesh\nusing Fluent Meshing. The parameters are set to generate a mesh with a surface mesh size\nof 2 and 1000, and a volume mesh size of 512. It leverages the Fluent Meshing Workflow\nAPI to create the mesh."},{"objectID":"Workflow examples","href":"examples/geometry-mesh-fluent/wf_gmf_02_fluent_meshing.html#parameters-for-the-script","title":"Workflow examples > Mesh generation > Parameters for the script","text":"Parameters for the script\n\nThe following parameters are used to control the script execution. You can\nmodify these parameters to suit your needs."},{"objectID":"Workflow examples","href":"examples/geometry-mesh-fluent/wf_gmf_02_fluent_meshing.html#generate-the-mesh","title":"Workflow examples > Mesh generation > Generate the mesh","text":"Generate the mesh\n\nThe function generate_mesh generates a mesh for a NACA airfoil using Fluent Meshing.\nThe function takes the following parameters:\n\nnaca_airfoil: NACA 4-digits airfoil number.\n\ndata_dir: Directory to save the mesh file.\n\nui_mode: User interface mode. The default is None.\n\ncontainer_dict: Configuration for the Fluent container. The default is None.\n\nThe function launches Fluent Meshing and initializes the workflow for watertight geometry.\nIt imports the geometry, generates the surface mesh, describes the geometry, updates\nboundaries and regions, adds boundary layers, generates the volume mesh, checks the mesh,\nwrites the mesh, and closes Fluent Meshing."},{"objectID":"Workflow examples","href":"examples/geometry-mesh-fluent/wf_gmf_02_fluent_meshing.html#executing-the-mesh-generation","title":"Workflow examples > Mesh generation > Executing the mesh generation","text":"Executing the mesh generation\n\nThe previous function is called to generate the mesh for the NACA airfoil.\nThe mesh is saved in the outputs directory. Depending on the environment,\nthe script will run in a container or locally.\n\nDepending on the environment, the script will run in a container or locally.\n\nTotal running time of the script: (5 minutes 52.295 seconds)\n\n\n\nDownload Jupyter notebook: wf_gmf_02_fluent_meshing.ipynb\n\nDownload Python source code: wf_gmf_02_fluent_meshing.py\n\nDownload zipped: wf_gmf_02_fluent_meshing.zip"},{"objectID":"Workflow examples","href":"examples/speos-optislang/index.html#speos-optislang-workflow","title":"Workflow examples > Speos, optiSLang workflow","text":"Speos, optiSLang workflow\n\nBelow is an example workflow that demonstrates how to perform an optical lightguide robustness\nstudy, set up the robustness workflow, and run an optical simulation using PyAnsys. The lightguide\nis prepared in Speos and exported as a .speos file. The exported file is processed by pySpeos to\nrun a parametric study, controlled by PyOptiSLang, in order to evaluate the to understand the\ninfluence of source power, source position on the lightguide performance, i.e. RMS contrast,\naverage luminance as well as the number of failed regulations\n\nsphx_glr_examples_speos-optislang_wf_so_01_light_guide_robustness_study.py\n\n"},{"objectID":"Workflow examples","href":"examples/speos-optislang/sg_execution_times.html#computation-times","title":"Workflow examples > Computation times","text":"Computation times\n\n33:17.113 total execution time for 1 file from examplesspeos-optislang:\n\n\n\n\n\n\n\nExample\n\nTime\n\nMem (MB)\n\nsphx_glr_examples_speos-optislang_wf_so_01_light_guide_robustness_study.py (wf_so_01_light_guide_robustness_study.py)\n\n33:17.113\n\n0.0"},{"objectID":"Workflow examples","href":"examples/mapdl-dpf/index.html#mapdl-and-dpf-workflow","title":"Workflow examples > MAPDL and DPF workflow","text":"MAPDL and DPF workflow\n\nThis example demonstrates consecutive sub modeling using PyMAPDL and PyDPF. The DPF framework\ninterpolates global model displacements and transfers them as boundary conditions to the local\nmodel, enabling efficient global–local coupling with the MAPDL pool.\n\nsphx_glr_examples_mapdl-dpf_wf_mapdl-dpf.py\n\n"},{"objectID":"Workflow examples","href":"examples/mapdl-dpf/sg_execution_times.html#computation-times","title":"Workflow examples > Computation times","text":"Computation times\n\n00:19.513 total execution time for 1 file from examples/mapdl-dpf:\n\n\n\n\n\n\n\nExample\n\nTime\n\nMem (MB)\n\nsphx_glr_examples_mapdl-dpf_wf_mapdl-dpf.py (wf_mapdl-dpf.py)\n\n00:19.513\n\n0.0"},{"objectID":"Workflow examples","href":"examples/geometry-mesh/wf_gm_02_mesh.html#mesh-generation","title":"Workflow examples > Mesh generation","text":"Mesh generation\n\nThis example shows how to generate a mesh from a CAD model. The CAD model is\nimported from a file, and the mesh is generated using the Ansys PRIME API."},{"objectID":"Workflow examples","href":"examples/geometry-mesh/wf_gm_02_mesh.html#parameters-for-the-script","title":"Workflow examples > Mesh generation > Parameters for the script","text":"Parameters for the script\n\nThe following parameters are used to control the script execution. You can\nmodify these parameters to suit your needs."},{"objectID":"Workflow examples","href":"examples/geometry-mesh/wf_gm_02_mesh.html#start-a-prime-session","title":"Workflow examples > Mesh generation > Start a PRIME session","text":"Start a PRIME session\n\nStart a PRIME session and get the model from the client."},{"objectID":"Workflow examples","href":"examples/geometry-mesh/wf_gm_02_mesh.html#load-the-cad-file","title":"Workflow examples > Mesh generation > Load the CAD file","text":"Load the CAD file\n\nLoad the CAD file from the previous example. The file is loaded into the\nmodel, and the part is extracted. The part is then summarized to get the\ndetails of the part.\n\nStatic Scene\n\n\n\nInteractive Scene\n\n"},{"objectID":"Workflow examples","href":"examples/geometry-mesh/wf_gm_02_mesh.html#mesh-generation","title":"Workflow examples > Mesh generation","text":"Mesh generation\n\nThe mesh is generated using the Ansys PRIME API. The mesh is generated using\nthe following steps:\n\nInitialize the connection tolerance and other parameters.\n\nScaffold the part.\n\nMesh the surfaces.\n\nWrite the mesh to a file."},{"objectID":"Workflow examples","href":"examples/geometry-mesh/wf_gm_02_mesh.html#surface-meshing","title":"Workflow examples > Mesh generation > Surface meshing","text":"Surface meshing\n\nThe surface mesh is generated using the previous element size and the\ntopological faces of the part.\n\nStatic Scene\n\n\n\nInteractive Scene\n\n"},{"objectID":"Workflow examples","href":"examples/geometry-mesh/wf_gm_02_mesh.html#export-the-mesh","title":"Workflow examples > Mesh generation > Export the mesh","text":"Export the mesh\n\nThe mesh is exported to a CDB file. The CDB file can be used to create a\nMAPDL case."},{"objectID":"Workflow examples","href":"examples/geometry-mesh/wf_gm_02_mesh.html#close-the-prime-session","title":"Workflow examples > Mesh generation > Close the PRIME session","text":"Close the PRIME session\n\nClose the PRIME session to release the resources. This is important to\nprevent memory leaks.\n\nTotal running time of the script: (0 minutes 38.834 seconds)\n\n\n\nDownload Jupyter notebook: wf_gm_02_mesh.ipynb\n\nDownload Python source code: wf_gm_02_mesh.py\n\nDownload zipped: wf_gm_02_mesh.zip"}]